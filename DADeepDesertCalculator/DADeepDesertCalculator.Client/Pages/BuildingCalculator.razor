@page "/buildingcalculator"

@using DuneData.Data;
@using DuneData.Model;

@inject DuneDataService dataService;
@inject IJSRuntime JS

<h3>Base Construction Calculator</h3>

@if (Buildings != null && Items != null)
{
    <div>
        <span>Current Limits: Production: </span><span>@(CurrentProduction)</span><span>/</span><span>@(StakingCount* ProductionStakingBonus + ProductionLimitBase)</span>
        <span>Storage: </span><span>@(CurrentStorage)</span><span>/</span><span>@(StakingCount* StorageStakingBonus + StorageLimitBase)</span>
    </div>
    <div>
        <h3>Storage Amounts</h3>
        <span>Water:</span> <span>
            @(SelectedBuildings.Where(a => a.Key.Type == BuildingType.Storage)
                    .ToDictionary(x => (Storage)x.Key, x => x.Value).Where(y => y.Key.SType == StorageType.Water)
                    .Sum(b => b.Value * b.Key.StorageAmount).ToString("N0"))
                                                                        </span>
                                                                        <span>Volume: </span><span>
            @(SelectedBuildings.Where(a => a.Key.Type == BuildingType.Storage)
                    .ToDictionary(x => (Storage)x.Key, x => x.Value).Where(y => y.Key.SType == StorageType.Volume)
                    .Sum(b => b.Value * b.Key.StorageAmount).ToString("N0"))
    </span>
</div>
<div class="@(PowerDraw < 0 ? "mud-theme-error" : "mud-theme-primary")">
    <span class="fa fa-bolt" />
    <span>@(PowerDraw)</span>
</div>
@if (SelectedBuildings.Keys.Any(a => a.Name.EndsWith("Pentashield")))
    {
        <div>
            <span class="fa fa-triangle-exclamation" /> <span>Base contains Pentashields, which are not included in the power calculation.</span>
        </div>
    }

    @if (!SelectedBuildings.Keys.Any(a => a.Name.EndsWith("Console")))
    {
        <div>
            <span class="fa fa-triangle-exclamation" /> <span>Base does not have a Sub-Fief Console.</span>
        </div>
    }
    @if (SelectedBuildings.Where(a => a.Key.Name.EndsWith("Sub-Fief Console")).Sum(b => b.Value) > 1)
    {
        <div>
            <span class="fa fa-triangle-exclamation" /> <span>Base has multiple Sub-Fief Consoles.</span>
        </div>
    }
    @if (SelectedBuildings.Keys.Any(a => a.Name.Equals("Sub-Fief Console")) && SelectedBuildings.Keys.Any(a => a.Name.EndsWith("Staking Unit")))
    {
        <div>
            <span class="fa fa-triangle-exclamation" /> <span>Base has Staking Units but a basic Sub-Fief Console.</span>
        </div>
    }
    <div>
        <span>Deep Desert Base:</span> <input type="checkbox" @bind-value=DeepDesertBase />
    </div>

    <div class="d-block">
        <div>Add a Building:</div>
        <div class="d-inline">
            <MudSelect T="BuildingType" @bind-Value="BuildingTypeFilterSelect" FullWidth=false SelectedValuesChanged="() => StateHasChanged()">
                <MudSelectItem Value="BuildingType.None">All</MudSelectItem>
                <MudSelectItem Value="BuildingType.Fabricator">Fabricators</MudSelectItem>
                <MudSelectItem Value="BuildingType.Storage">Storage</MudSelectItem>
                <MudSelectItem Value="BuildingType.Refinery">Refinery</MudSelectItem>
                <MudSelectItem Value="BuildingType.StakingUnit">Staking Unit</MudSelectItem>
                <MudSelectItem Value="BuildingType.Utility">Utility</MudSelectItem>
            </MudSelect>

            <MudSelect T="Building" SelectedValuesChanged="(e) => SelectedValueChanged(e)" FullWidth=false @ref="BuildingSelectField" Placeholder="Select a Building">
                @foreach (var building in Buildings.Where(a => !SelectedBuildings.Keys.Contains(a) && (a.Type == BuildingTypeFilterSelect || BuildingTypeFilterSelect == BuildingType.None)).OrderBy(b => b.Name))
                {
                    <MudSelectItem Value="building">@(building.Name)</MudSelectItem>
                }
            </MudSelect>
        </div>
    </div>

    <MudDataGrid Items="@SelectedBuildings.Keys">
        <Columns>
            <TemplateColumn>
                <CellTemplate>
                    <MudStack Row>
                        <img width="50" height="50" class="rounded-lg @(context.Item.Id)-image" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.Name" />
            <TemplateColumn>
                <CellTemplate>
                    <MudStack Row>
                        @if (SelectedBuildings[context.Item] > 1)
                        {
                            <MudIconButton Color="Color.Primary" Icon="fas fa-minus" Size="Size.Small" OnClick="(e) => SubtractBuilding(context.Item)" />
                        }
                        else
                        {
                            <MudIconButton Color="Color.Primary" Icon="fas fa-trash" Size="Size.Small" OnClick="(e) => RemoveBuilding(context.Item)" />
                        }
                        <span>@SelectedBuildings[context.Item]</span><MudIconButton Color="Color.Primary" Icon="fas fa-plus" Size="Size.Small" OnClick="(e) => AddBuilding(context.Item)" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.PowerDraw" Title="Power Change" />
        </Columns>
    </MudDataGrid>
    <div>
        <h2>
            Required Volume: @(RequiredResources.Sum(a => Math.Ceiling(a.Value * a.Key.Volume * DDMulti)))V
        </h2>
        <h3>
            Required Materials:
        </h3>
        <MudDataGrid Items="@RequiredResources.Keys.OrderByDescending(a => RequiredResources[a])">
            <Columns>
                <TemplateColumn>
                    <CellTemplate>
                        <MudStack Row>
                            <img width="50" height="50" class="rounded-lg @(context.Item.Id)-image" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.Name" />
                <PropertyColumn Property="x => Math.Ceiling(RequiredResources[x] * DDMulti)" Title="Number" />
                <PropertyColumn Property="x => x.Volume" Title="Volume/ea" />
                <PropertyColumn Property="x => x.Volume * Math.Ceiling(RequiredResources[x] * DDMulti)" Title="Total Vol." />
            </Columns>
        </MudDataGrid>
    </div>

}
else
{
    <div>Loading...</div>
}

@code {
    IEnumerable<Building>? Buildings;
    IEnumerable<Item>? Items;

    Dictionary<string, byte[]> ImageCache = new();

    MudSelect<Building> BuildingSelectField = new();

    Dictionary<Building, int> SelectedBuildings = new();

    int ProductionLimitBase = 40;
    int StorageLimitBase = 75;

    int ProductionStakingBonus = 8;
    int StorageStakingBonus = 15;

    int CurrentProduction => SelectedBuildings.Where(a => (a.Key.Type == BuildingType.Refinery || a.Key.Type == BuildingType.Utility || a.Key.Type == BuildingType.Fabricator) && !a.Key.Name.Contains("Sub-Fief") && !a.Key.Name.Contains("Pentashield")).Sum(b => b.Value);
    int CurrentStorage => SelectedBuildings.Where(a => a.Key.Type == BuildingType.Storage).Sum(b => b.Value);

    int StakingCount => SelectedBuildings.Where(a => a.Key.Type == BuildingType.StakingUnit).Sum(b => b.Value);

    int PowerDraw => SelectedBuildings.Sum(a => a.Value * a.Key.PowerDraw);

    BuildingType BuildingTypeFilterSelect = BuildingType.None;

    Dictionary<Item, int> RequiredResources
    {
        get
        {
            var temp = new Dictionary<Guid, int>();
            foreach (var bld in SelectedBuildings)
            {
                foreach (var mat in bld.Key.Materials.Keys)
                {
                    if (temp.ContainsKey(mat)) temp[mat] += (bld.Key.Materials[mat] * bld.Value);
                    else temp.Add(mat, (bld.Key.Materials[mat] * bld.Value));
                }
            }
            return temp.ToDictionary(x => Items!.First(a => a.Id == x.Key), x => x.Value);
        }
    }

    bool DeepDesertBase = false;
    decimal DDMulti
    {
        get
        {
            return (DeepDesertBase ? 0.5m : 1);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Items = await dataService.GetItemsAsync();
        Buildings = await dataService.GetBuildingsAsync();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        foreach (var item in SelectedBuildings)
            SetImageAsync(item.Key.Image, item.Key.Id + "-image", item.Key.Name);

        foreach (var item in RequiredResources)
            SetImageAsync(item.Key.Image, item.Key.Id + "-image", item.Key.Name);
    }

    private async Task SetImageAsync(string path, string element, string title)
    {
        if (string.IsNullOrEmpty(path)) return;
        byte[] blob;
        if (ImageCache.ContainsKey(path))
        {
            blob = ImageCache[path];
        }
        else
        {
            var imageStream = dataService.GetImageStream(path);
            using (var memoryStream = new MemoryStream())
            {
                imageStream.CopyTo(memoryStream);
                blob = memoryStream.ToArray();
                ImageCache.Add(path, blob);
            }
        }
        await JS.InvokeVoidAsync("setSource", element, blob, "image/webp", title);
    }

    private void AddBuilding(Building add)
    {
        if (SelectedBuildings.ContainsKey(add))
        {
            SelectedBuildings[add] += 1;
        }
        else
        {
            SelectedBuildings.Add(add, 1);
        }
    }

    private void SubtractBuilding(Building subtract)
    {
        if (SelectedBuildings.ContainsKey(subtract))
        {
            SelectedBuildings[subtract] -= 1;

            if (SelectedBuildings[subtract] <= 0)
                SelectedBuildings.Remove(subtract);
        }
    }

    private void RemoveBuilding(Building remove)
    {
        if (SelectedBuildings.ContainsKey(remove))
            SelectedBuildings.Remove(remove);
    }

    private void SelectedValueChanged(IEnumerable<Building?>? values)
    {
        var value = values?.FirstOrDefault();
        if (value != null)
        {
            AddBuilding(value);
            BuildingSelectField.ClearAsync();
            //SetImageAsync(value.Image, value.Id + "-image", value.Name);
        }
        StateHasChanged();
    }
}
