@page "/vehiclecalculator"

@using DADeepDesertCalculator.Client.Components
@using DuneData.Data;
@using DuneData.Model;
@using System.Text

@inject DuneDataService dataService;
@inject IJSRuntime JS

<h3>Vehicle Construction Calculator</h3>

@if (Vehicles != null && Items != null && Parts != null)
{
    <div class="d-block">
        <div>Add a Vehicle:</div>
        <div class="d-inline">
            <MudSelect T="Vehicle" @bind-Value="VehicleSelectField" FullWidth=false>
                @foreach (Vehicle vehicle in Vehicles)
                {
                    <MudSelectItem Value="vehicle">@vehicle.DisplayName</MudSelectItem>
                }
            </MudSelect>

            <MudButton OnClick="() => AddVehicle(VehicleSelectField)">Add Vehicle</MudButton>
        </div>
    </div>
    <MudDataGrid Items="@SelectedVehicles.Keys" ReadOnly=false EditMode="DataGridEditMode.Cell" EditTrigger="DataGridEditTrigger.OnRowClick" ExpandSingleRow=true>
        <Columns>
            <HierarchyColumn T="Vehicle" />
            <TemplateColumn Editable=false>
                <CellTemplate>
                    <MudStack Row>
                        <img width="50" height="50" class="rounded-lg @(context.Item.Id)-image" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="x => x.DisplayName" Title="Name" />
            <TemplateColumn Editable=false>
                <CellTemplate>
                    <MudStack Row>
                        @if (SelectedVehicles[context.Item] > 1)
                        {
                            <MudIconButton Color="Color.Primary" Icon="fas fa-minus" Size="Size.Small" OnClick="(e) => SubtractVehicle(context.Item)" />
                        }
                        else
                        {
                            <MudIconButton Color="Color.Primary" Icon="fas fa-trash" Size="Size.Small" OnClick="(e) => RemoveVehicle(context.Item)" />
                        }
                        <span>@SelectedVehicles[context.Item]</span><MudIconButton Color="Color.Primary" Icon="fas fa-plus" Size="Size.Small" OnClick="(e) => AddVehicle(context.Item)" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <ChildRowContent>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@context.Item.DisplayName</MudText>
                        <MudText Typo="Typo.subtitle1">@context.Item.Type.ToDescriptionString()</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @foreach (var typeKVP in context.Item.RequiredParts.Where(a => a.Key != PartType.Utility))
                    {
                        <span>
                            @(typeKVP.Value)x
                            @{
                                var part = Parts.FirstOrDefault(a => a.ForVehicleType == context.Item.Type && a.Type == typeKVP.Key);
                                string id = part?.Id.ToString() ?? "";
                                <img width="50" height="50" class="rounded-lg @(id + "-image")" />
                            }
                        </span>
                        <MudHistorySelect TValue="Part" Options="Parts.Where(a => a.ForVehicleType == context.Item.Type && a.Type == typeKVP.Key).ToDictionary(x => x, x => x.Name)" OnValueChanged="(e) => PartChanged(e, context.Item)" />
                    }
                    @{
                        var UtilityFields = context.Item.AllowedUtilityPartTypes.Where(a => a.Key != UtilityPartType.Other);
                    }
                    @foreach (var partKVP in UtilityFields)
                    {
                        <MudInputLabel>@(partKVP.Key):</MudInputLabel>
                        <MudHistorySelect TValue="UtilityPart" Options="Parts.Where(a => !context.Item.ChosenParts.Contains(a) && a.ForVehicleType == context.Item.Type && a.Type == PartType.Utility
                                                                                           && ((UtilityPart)a).UtilityType == partKVP.Key)
                                                                                           .Select(a => (UtilityPart)a).ToDictionary(x => x, x => x.Name)" OnValueChanged="(e) => UtilityPartChanged(e, context.Item)" />
                                }

                    @for (int i = 0; i < (context.Item.AllowedUtilityPartTypes.Keys.Contains(UtilityPartType.Other) ? context.Item.AllowedUtilityPartTypes[UtilityPartType.Other] : 0); i++)
                    {
                        <MudInputLabel>Other:</MudInputLabel>
                        <MudHistorySelect TValue="UtilityPart" Options="Parts.Where(a => /*!context.Item.ChosenParts.Contains(a) &&*/ a.ForVehicleType == context.Item.Type && a.Type == PartType.Utility)
                                                                                               .Select(a => (UtilityPart)a).Where(b => !UtilityFields.Select(a => a.Key).Contains(b.UtilityType)).ToDictionary(x => x, x => x.Name)" OnValueChanged="(e) => UtilityPartChanged(e, context.Item)" />
                                }

                    @if (context.Item.ChosenParts.Count(a => a.Type == PartType.Utility) > 0 && context.Item.ChosenParts?.Where(a => a.Type == PartType.Utility)?.CountBy(b => ((UtilityPart)b).UtilityType)?.Max(c => c.Value) > 1)
                    {
                        <div>
                            <span class="fa fa-triangle-exclamation" /> <span>Cannot have more than one of the same utility part category.</span>
                        </div>
                    }
                </MudCardContent>
            </MudCard>
        </ChildRowContent>
    </MudDataGrid>
    <div>
        <h2>
            Required Volume: @(RequiredResources.Sum(a => Math.Ceiling(a.Value * a.Key.Volume)))V
        </h2>
        <h3>
            Required Materials:
        </h3>
        <MudButton OnClick="GenerateBBCode">Export to BBCode</MudButton>
        <MudDataGrid Items="@RequiredResources.Keys.OrderByDescending(a => RequiredResources[a])">
            <Columns>
                <TemplateColumn>
                    <CellTemplate>
                        <MudStack Row>
                            <img width="50" height="50" class="rounded-lg @(context.Item.Id)-image" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.Name" />
                <PropertyColumn Property="x => RequiredResources[x]" Title="Number" />
                <PropertyColumn Property="x => x.Volume" Title="Volume/ea" />
                <PropertyColumn Property="x => x.Volume * RequiredResources[x]" Title="Total Vol." />
            </Columns>
        </MudDataGrid>

    </div>

}
else
{
    <div>Loading...</div>
}

@code {
    IEnumerable<Vehicle>? Vehicles;
    IEnumerable<Item>? Items;
    IEnumerable<Part>? Parts;

    Dictionary<string, byte[]> ImageCache = new();

    Dictionary<Vehicle, int> SelectedVehicles = new();

    Vehicle? CurrentVehicle;

    Vehicle? VehicleSelectField;
    PartType PartTypeFilterSelect = PartType.None;

    Dictionary<Item, int> RequiredResources
    {
        get
        {
            var temp = new Dictionary<Guid, int>();
            foreach (var vlc in SelectedVehicles)
            {
                foreach (var part in vlc.Key.ChosenParts.Where(a => a.Type != PartType.Utility))
                {
                    foreach (var mat in part.Materials.Keys)
                    {
                        if (temp.ContainsKey(mat)) temp[mat] += (part.Materials[mat] * vlc.Key.RequiredParts[part.Type] * vlc.Value);
                        else temp.Add(mat, (part.Materials[mat] * vlc.Key.RequiredParts[part.Type] * vlc.Value));
                    }
                }
                foreach (var part in vlc.Key.ChosenParts.Where(a => a.Type == PartType.Utility))
                {
                    foreach (var mat in part.Materials.Keys)
                    {
                        if (temp.ContainsKey(mat)) temp[mat] += (part.Materials[mat] * vlc.Value);
                        else temp.Add(mat, (part.Materials[mat] * vlc.Value));
                    }
                }
            }
            return temp.ToDictionary(x => Items!.First(a => a.Id == x.Key), x => x.Value);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Items = await dataService.GetItemsAsync();
        Vehicles = await dataService.GetVehiclesAsync();
        Parts = await dataService.GetPartsAsync();
        VehicleSelectField = Vehicles?.FirstOrDefault();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        foreach (var item in SelectedVehicles)
            SetImageAsync(item.Key.Image, item.Key.Id + "-image", item.Key.Name);

        foreach (var item in RequiredResources)
            SetImageAsync(item.Key.Image, item.Key.Id + "-image", item.Key.Name);

        foreach (var item in Parts)
            SetImageAsync(item.Image, item.Id + "-image", item.Name);
    }

    private async Task SetImageAsync(string path, string element, string title)
    {
        if (string.IsNullOrEmpty(path)) return;
        byte[] blob;
        if (ImageCache.ContainsKey(path))
        {
            blob = ImageCache[path];
        }
        else
        {
            var imageStream = dataService.GetImageStream(path);
            using (var memoryStream = new MemoryStream())
            {
                imageStream.CopyTo(memoryStream);
                blob = memoryStream.ToArray();
                ImageCache.Add(path, blob);
            }
        }
        await JS.InvokeVoidAsync("setSource", element, blob, "image/webp", title);
    }
    private void PartChanged(Tuple<IEnumerable<Part>, IEnumerable<Part>> e, Vehicle v)
    {
        var oldParts = e.Item1;
        var newParts = e.Item2;
        if (oldParts != null)
            v.ChosenParts = v.ChosenParts.Where(a => !oldParts.Contains(a)).Concat(newParts).ToList();
        else
            v.ChosenParts = v.ChosenParts.Concat(newParts).ToList();
    }
    private void UtilityPartChanged(Tuple<IEnumerable<UtilityPart>, IEnumerable<UtilityPart>> e, Vehicle v)
    {
        var oldParts = e.Item1;
        var newParts = e.Item2;
        if (oldParts != null)
        {
            foreach (var p in oldParts)
                v.ChosenParts.Remove(v.ChosenParts.First(a => a.Name == p.Name));
            v.ChosenParts = v.ChosenParts.Concat(newParts).ToList();
        }
        else
        {
            v.ChosenParts = v.ChosenParts.Concat(newParts).ToList();
        }
    }
    private void AddVehicle(Vehicle? add)
    {
        if (add == null) return;

        if (SelectedVehicles.ContainsKey(add))
        {
            SelectedVehicles[add] += 1;
        }
        else
        {
            SelectedVehicles.Add(add.Clone(), 1);
        }
    }

    private void SubtractVehicle(Vehicle subtract)
    {
        if (SelectedVehicles.ContainsKey(subtract))
        {
            SelectedVehicles[subtract] -= 1;

            if (SelectedVehicles[subtract] <= 0)
                SelectedVehicles.Remove(subtract);
        }
    }

    private void RemoveVehicle(Vehicle remove)
    {
        if (SelectedVehicles.ContainsKey(remove))
            SelectedVehicles.Remove(remove);
    }

    private async Task GenerateBBCode()
    {
        StringBuilder bbcode = new();
        foreach (var item in RequiredResources.OrderByDescending(a => a.Value))
        {
            bbcode.AppendLine("> :o: " + item.Key.Name + " 0/" + item.Value);
        }
        await JS.InvokeVoidAsync("clipboardCopy.copyText", bbcode.ToString());
    }

}
