@typeparam TValue

<MudSelect @ref="control" T="TValue" SelectedValues=@SelectedOptions MultiSelection=@Multiselect SelectedValuesChanged="(IEnumerable<TValue> e) => OnSelectionChanged(e)">
    @foreach (var option in Options)
    {
        <MudSelectItem Value="option.Key">@option.Value</MudSelectItem>
    }
</MudSelect>

@code {
    MudSelect<TValue> control;

    [Parameter]
    public string Label { get; set; } = string.Empty;

    [Parameter]
    public Dictionary<TValue, string> Options { get; set; } = new();

    [Parameter]
    public IEnumerable<TValue> SelectedOptions { get; set; } = default!;

    private IEnumerable<TValue>? OldValues { get; set; } = null;

    [Parameter]
    public bool Multiselect { get; set; } = false;

    [Parameter]
    public EventCallback<Tuple<IEnumerable<TValue?>, IEnumerable<TValue?>>> OnValueChanged { get; set; } = default!;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
            await control.SelectOption(0);
    }

    private async Task OnSelectionChanged(IEnumerable<TValue> e)
    {
        SelectedOptions = e;
        if (OnValueChanged.HasDelegate)
            await OnValueChanged.InvokeAsync(new Tuple<IEnumerable<TValue?>, IEnumerable<TValue?>>(OldValues, e));

        OldValues = SelectedOptions.ToList();
    }
}
